name: Setup Python and Poetry
description: Setup Python and Poetry. Cribbed from snok/install-poetry.
inputs:
  python-version:
    description: Python version to pass to actions/setup-python@v4.
    required: false
    default: "3.x"
  poetry-version:
    description: Poetry version to install via pip.
    required: false
    default: "1.2.2"
  extras:
    description: >
      If present, a space-separated list of extras to pass to
      `poetry install --extra ...`. Either way, dev-dependencies
      will be installed.
    # If https://github.com/python-poetry/poetry/issues/3413 get solved, I think
    # we should make this action install all extras by default.
    required: false
    default: ""
  groups:
    description: >
      If present, a space-separated list of dependency groups to pass to
      `poetry install --with ...`.
    required: false
    default: ""
  install-project:
    description: >
      Set to "false" to disable installing of the project, instead only install
      deps.
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: add .local/bin to path
      run: "echo $HOME/.local/bin >> $GITHUB_PATH"
      shell: bash

    - name: Check for poetry lock
      run: "test -f poetry.lock || (echo No lock file! && false)"
      shell: bash

    - name: Install poetry from scratch
      run: python -m pip install --user poetry==${{ inputs.poetry-version }}
      shell: bash

    # Poetry manages a virtualenv for us. We're going to cache that too.
    # Again, we're following snok/install-poetry's README.
    - name: Locate poetry venv
      id: poetry-venvs
      run: echo "dir=$(python -m poetry config virtualenvs.path)" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Check that the poetry lockfile is up to date
      # This is rather hacky. We look for the warning message in poetry's
      # output. We really want to use `poetry lock --check`, but that is only
      # available in poetry 1.2.
      # https://github.com/python-poetry/poetry/issues/1406
      #
      # Note that the error message has changed with Poetry 1.2 to
      #     Warning: poetry.lock is not consistent with pyproject.toml. You may be
      #     getting improper dependencies. Run poetry lock [--no-update] to fix it.
      # So this check fails on Poetry 1.2. But that version of poetry wants to change
      # the lockfile to include versions of setuptools for each dependency. So it's
      # convenient to leave this as-is, unless we want to change to use Poetry 1.2 by
      # default in the future.
      run: >-
        poetry export --without-hashes | (! grep "The lock file is not up to date") ||
        (echo pyproject.toml was updated without running \`poetry lock --no-update\`. && false)
      shell: bash

    - name: Install project (no extras or groups)
      if: inputs.extras == '' && inputs.groups == ''
      run: poetry install --no-interaction ${{ inputs.install-project != 'true' && '--no-root' || '' }}
      shell: bash

    - name: Install project with --extras=${{ inputs.extras }} --with=${{ inputs.groups }}
      if: inputs.extras != '' || inputs.groups != ''
      # (Empty extras or groups lists are fine.)
      run: poetry install --no-interaction --extras="${{ inputs.extras }}" --with="${{ inputs.groups }}" ${{ inputs.install-project != 'true' && '--no-root' || '' }}
      shell: bash

    # For debugging---let's just check what we're working with.
    - name: Dump virtual environment
      run: |
        poetry env info
        poetry run pip list
      shell: bash
